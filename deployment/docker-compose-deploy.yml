version: "3"

services:
  cronicorn-ui:
    container_name: prod-cronicorn-ui
    build:
      context: ../
      dockerfile: deployment/Dockerfile.frontend
      args: 
        - NEXT_PUBLIC_API_URL=${API_URL}
    ports:
      - 3456:3000
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=${API_URL}

  cronicorn-db:
    container_name: prod-cronicorn-db
    image: postgres:17
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}

    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - "../files/cronicorn-database-volume:/var/lib/postgresql/data"
  migrator:
    container_name: prod-cronicorn-migrator
    build:
      context: ../
      dockerfile: deployment/Dockerfile.migrator
    depends_on:
      cronicorn-db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
  cronicorn-api:
    container_name: prod-cronicorn-api
    restart: unless-stopped
    depends_on:
      cronicorn-db:
        condition: service_healthy
      migrator:
        condition: service_started
    build:
      context: ../
      dockerfile: deployment/Dockerfile.api
      
    ports:
       - 3001:3001
    # network_mode: host
    environment:
      DATABASE_URL: ${DATABASE_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      GITHUB_ID: ${GITHUB_ID}
      GITHUB_SECRET: ${GITHUB_SECRET}
      API_URL: ${API_URL}

      # API_HOSTNAME: ${API_HOSTNAME}
      # API_PORT: ${API_PORT}
      # API_URL: ${API_URL}
      # NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}


# networks:
#   cronicorn_prod_network:
#     name: cronicorn_prod_network