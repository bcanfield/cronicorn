name: ðŸ§ª Test Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10.7.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Start PostgreSQL database
        run: docker compose --env-file .env.test up -d cronicorn-dev-db
      
      - name: Wait for PostgreSQL to be ready
        run: |
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          timeout=60
          while ! docker exec cronicorn-dev-db pg_isready -U user -d db -h localhost > /dev/null 2>&1; do
            timeout=$((timeout - 1))
            if [ $timeout -eq 0 ]; then
              echo "Timed out waiting for PostgreSQL to be ready"
              exit 1
            fi
            echo "PostgreSQL is not ready yet. Waiting..."
            sleep 1
          done
          echo "PostgreSQL is ready!"
      
      - name: Run database migrations and reset
        run: pnpm db:push
      
      - name: Run Tests with coverage
        run: pnpm test
      
      # Upload API coverage to Codecov
      - name: Upload API Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./apps/api/coverage/lcov.info
          flags: api
          name: api-coverage
          fail_ci_if_error: false
          verbose: true

      # Upload Web coverage to Codecov
      - name: Upload Web Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./apps/web/coverage/lcov.info
          flags: web
          name: web-coverage
          fail_ci_if_error: false
          verbose: true
